{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","useState","isStarted","setStarted","isReversed","setReversed","NONE","sortType","setSortType","visibleGoods","sort","good1","good2","ALPABET","localeCompare","LENGTH","length","reverse","className","type","onClick","stateReversed","map","good","ReactDOM","render","document","getElementById"],"mappings":"wJAgBKA,E,4CAbCC,EAA4B,CAChC,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,O,eAAAA,I,qBAAAA,I,oBAAAA,M,KAME,IAAME,EAAgB,WAC3B,MAAgCC,oBAAS,GAAzC,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAkCF,oBAAS,GAA3C,mBAAOG,EAAP,KAAmBC,EAAnB,KACA,EAAgCJ,mBAASH,EAASQ,MAAlD,mBAAOC,EAAP,KAAiBC,EAAjB,KAEMC,EAAY,UAAOV,GAiBzB,OAfAU,EAAaC,MAAK,SAACC,EAAOC,GACxB,OAAQL,GACN,KAAKT,EAASe,QACZ,OAAOF,EAAMG,cAAcF,GAC7B,KAAKd,EAASiB,OACZ,OAAOJ,EAAMK,OAASJ,EAAMI,OAC9B,QACE,OAAO,MAITZ,GACFK,EAAaQ,UAIb,qBAAKC,UAAU,MAAf,SACIhB,EAYE,qCACE,wBACEiB,KAAK,SACLC,QAAS,WACPf,GAAY,GACZG,EAAYV,EAASe,UAJzB,iCAUA,wBACEM,KAAK,SACLC,QAAS,WACPf,GAAY,GACZG,EAAYV,EAASiB,SAJzB,4BAUA,wBACEI,KAAK,SACLC,QAAS,WACPf,GAAY,SAAAgB,GAAa,OAAKA,MAHlC,qBASA,wBACEF,KAAK,SACLC,QAAS,WACPZ,EAAYV,EAASQ,MACrBD,GAAY,IAJhB,mBAUA,oBAAIa,UAAU,QAAd,SACGT,EAAaa,KAAI,SAAAC,GAAI,OACpB,6BACGA,GADMA,WApDf,wBACEJ,KAAK,SACLC,QAAS,WACPjB,GAAW,IAHf,sBC7CVqB,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,U","file":"static/js/main.70787308.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\n\nconst goodsFromServer: string[] = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  NONE,\n  ALPABET,\n  LENGTH,\n}\n\nexport const App: React.FC = () => {\n  const [isStarted, setStarted] = useState(false);\n  const [isReversed, setReversed] = useState(false);\n  const [sortType, setSortType] = useState(SortType.NONE);\n\n  const visibleGoods = [...goodsFromServer];\n\n  visibleGoods.sort((good1, good2) => {\n    switch (sortType) {\n      case SortType.ALPABET:\n        return good1.localeCompare(good2);\n      case SortType.LENGTH:\n        return good1.length - good2.length;\n      default:\n        return 0;\n    }\n  });\n\n  if (isReversed) {\n    visibleGoods.reverse();\n  }\n\n  return (\n    <div className=\"App\">\n      {!isStarted\n        ? (\n          <button\n            type=\"button\"\n            onClick={() => {\n              setStarted(true);\n            }}\n          >\n            Start\n          </button>\n        )\n        : (\n          <>\n            <button\n              type=\"button\"\n              onClick={() => {\n                setReversed(false);\n                setSortType(SortType.ALPABET);\n              }}\n            >\n              Sort alphabetically\n            </button>\n\n            <button\n              type=\"button\"\n              onClick={() => {\n                setReversed(false);\n                setSortType(SortType.LENGTH);\n              }}\n            >\n              Sort by length\n            </button>\n\n            <button\n              type=\"button\"\n              onClick={() => {\n                setReversed(stateReversed => !stateReversed);\n              }}\n            >\n              Reverse\n            </button>\n\n            <button\n              type=\"button\"\n              onClick={() => {\n                setSortType(SortType.NONE);\n                setReversed(false);\n              }}\n            >\n              Reset\n            </button>\n\n            <ul className=\"Goods\">\n              {visibleGoods.map(good => (\n                <li key={good}>\n                  {good}\n                </li>\n              ))}\n            </ul>\n          </>\n        )}\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}